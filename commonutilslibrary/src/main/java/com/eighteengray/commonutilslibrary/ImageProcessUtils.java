package com.eighteengray.commonutilslibrary;import android.graphics.Bitmap;import android.graphics.Bitmap.Config;import android.graphics.Canvas;import android.graphics.ColorMatrix;import android.graphics.ColorMatrixColorFilter;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.PorterDuff.Mode;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;/** * 图像处理相关工具类 */public class ImageProcessUtils{	/**	 * 图像旋转	 * @param bitmap 原始图像	 * @param rotateAngle  旋转角度     * @return     */	public static Bitmap bitmapRotate(Bitmap bitmap, int rotateAngle)	{        Matrix matrix = new Matrix();		matrix.setRotate(rotateAngle, (float) bitmap.getWidth(), (float) bitmap.getHeight());        float targetX, targetY;        if (rotateAngle == 90)        {        	targetX = bitmap.getHeight();        	targetY = 0;        }         else         {        	targetX = bitmap.getHeight();        	targetY = bitmap.getWidth();        }	    final float[] values = new float[9];		matrix.getValues(values);	    float x1 = values[Matrix.MTRANS_X];	    float y1 = values[Matrix.MTRANS_Y];		matrix.postTranslate(targetX - x1, targetY - y1);	    Bitmap newBitmap = Bitmap.createBitmap(bitmap.getHeight(), bitmap.getWidth(), Config.ARGB_8888);	    Paint paint = new Paint();	    Canvas canvas = new Canvas(newBitmap);	    canvas.drawBitmap(bitmap, matrix, paint);	    return newBitmap;	  }	/**	 * 圆角图片	 * @param bitmap 原始图像	 * @param pixels 圆角大小	 * @return     */	public static Bitmap bitmapRoundCorner(Bitmap bitmap, int pixels)	{		Bitmap roundCornerBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Config.ARGB_8888);		Canvas canvas = new Canvas(roundCornerBitmap);		final int color = 0xff424242;		final Paint paint = new Paint();		final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());		final RectF rectF = new RectF(rect);		final float roundPx = pixels;		paint.setAntiAlias(true);		canvas.drawARGB(0, 0, 0, 0);		paint.setColor(color);		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN)); //两个绘制取交集就可以画出圆角图像		canvas.drawBitmap(bitmap, rect, rect, paint);		return roundCornerBitmap;	}	/**	 * 转变为灰度图	 * @param bitmap	 * @return     */	public static Bitmap grayBitmap(Bitmap bitmap)	{		int width = bitmap.getWidth();		int height = bitmap.getHeight();		Bitmap grayBitmap = Bitmap.createBitmap(width, height, Config.RGB_565);		Canvas c = new Canvas(grayBitmap);		Paint paint = new Paint();		ColorMatrix cm = new ColorMatrix();		cm.setSaturation(0);		ColorMatrixColorFilter cf = new ColorMatrixColorFilter(cm);		paint.setColorFilter(cf);  //这里用paint的ColorFilter做颜色过滤		c.drawBitmap(bitmap, 0, 0, paint);		return grayBitmap;	}	/**	 * 图像上添加水印，添加的是图像	 * @param bitmap	 * @param mark	 * @param x	 * @param y     * @return     */	public static Bitmap watermarkWithBmp(Bitmap bitmap, Bitmap mark, int x, int y)    {        int w = bitmap.getWidth();        int h = bitmap.getHeight();        Bitmap newb = Bitmap.createBitmap(w, h, Config.RGB_565);        Canvas cv = new Canvas(newb);        cv.drawBitmap(bitmap, 0, 0, null);        cv.drawBitmap(mark, x, y, null);  //系需要先画一幅图，再画另一幅图就可以        cv.save(Canvas.ALL_SAVE_FLAG);        cv.restore();//存储          return newb;    }	/**	 * 图像上添加水印，添加的是文字	 * @param bitmap	 * @param text	 * @param x	 * @param y	 * @param size     * @param color     * @return     */	public static Bitmap watermarkWithText(Bitmap bitmap, String text, int x, int y, int size, int color)	{  		int w = bitmap.getWidth();        int h = bitmap.getHeight();        Bitmap newb = Bitmap.createBitmap(w, h, Config.RGB_565);        Canvas cv = new Canvas(newb);        cv.drawBitmap(bitmap, 0, 0, null);        Paint p = new Paint();        p.setARGB(250, 255, 255, 255);         p.setAntiAlias(true);//去除锯齿          p.setFilterBitmap(true);//对位图进行滤波处理          p.setTextSize(size);             cv.drawText(text, x, y, p);  //也是先画原图，再画文字        cv.save(Canvas.ALL_SAVE_FLAG);        cv.restore();        return newb;    }}